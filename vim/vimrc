" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate Pathogen plugin
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" SETTINGS
"
let g:snips_author = "Andrew Le" " Set snipmate author 

set encoding=utf-8
set hidden                      " Be more liberal about hidden buffers
set backspace=indent,eol,start  " backspace over everything
set smarttab                    " 
set softtabstop=2               " 
set shiftwidth=2                " 
set expandtab                   " 
set tabstop=4                   " 
set ignorecase                  " 
set smartcase                   " 
set nowrap                      " 
set textwidth=0                 " 
set autoindent                  " 
set linebreak                   " 
set number                      " 
set cursorline                  " 
set wildignore=*.swp            " 
set nobackup                    " do not keep a backup file, use an SCM instead
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set incsearch                   " do incremental searching
set hlsearch                    " Highlight all search matches
set lazyredraw                  " Don't update the display while executing macros
set ch=2                        " Make command line two lines high
set laststatus=2                " Always show the status line
set showcmd                     " Show the current command in the lower right corner
set showmode                    " Show the current mode
set foldmethod=marker           " Set the folding method to use inline markers
set completeopt=longest,menuone " Omnicompletion customizations
set timeoutlen=250              " Short map keys timeout keeps the ui feeling snappy
set grepprg=ack                 " Use ack for grepping instead of vimgrep
set grepformat=%f:%l:%m
set listchars=tab:>#,eol:$,trail:.
set tags=./TAGS,TAGS            " Use Emacs tagfile naming convention

" PLUGIN SETTINGS
"
" Hide the following file name patterns from the builtin browser
let g:netrw_list_hide = '.*\.swp$,\.DS_Store$'

" FuzzyFinder Plugin
let g:fuzzy_ignore = "*.log,*.gif,*.jpeg,*.jpg,*.png,*.pdf"
let g:fuzzy_matching_limit = 20

" SuperTab
let g:SuperTabCrMapping = 1
let g:SuperTabMidWordCompletion = 0
let g:SuperTabMappingTabLiteral = '<s-tab>'

" MakeGreen
map <silent> <Leader>] :call MakeGreen()<cr>

" Compilers for MakeGreen
autocmd BufNewFile,BufRead *_spec.rb compiler rspec
autocmd BufNewFile,BufRead *_test.rb compiler rubyunit 

" File types
autocmd BufNewFile,BufRead *.aspx,*.ascx :set ft=html
autocmd BufNewFile,BufRead *.ru :set ft=ruby

" GUI/TERMINAL ENVIRONMENT SETTINGS
"
if has("gui_running")
  colorscheme ir_black
  set guioptions=egmrt
  set guifont=Inconsolata:h14
  set listchars=tab:▸\ ,eol:¬,trail:.
endif

if !has("gui_running")
  " I'm using iTerm2, declare that I've got 256 colors
  set t_Co=256
  colorscheme ir_black
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  hi MatchParen guifg=#f6f3e8 guibg=#857b6f gui=BOLD 
                \ ctermfg=cyan ctermbg=darkgray cterm=NONE
endif

" In many termioal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" NORMAL MODE KEY MAPPINGS"{{{
" 
" Move up and down over screen lines instead of file lines
nnoremap j gj
nnoremap k gk

" C-J and C-K move over lines a bit faster
nnoremap <c-j> 5gj
nnoremap <c-k> 5gk

" FuzzyFinder settings
nnoremap <silent> <C-f><C-r> :FuzzyFinderRenewCache<CR>
map <leader>b :FuzzyFinderBuffer<CR>
map <leader>t :FuzzyFinderTextMate<CR>

" Don't use Ex mode, use Q for formatting
map Q gq

" Edit the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Turn off that stupid highlight search
nmap <silent> <leader>/ :noh<CR>

" Rewrap the current paragraph
nmap <C-q> gwap

" Easy buffer navigation (next buffer and previous buffer)
noremap <silent> <leader>n :bn<CR>
noremap <silent> <leader>p :bp<CR>

noremap <silent> <leader>nt :tabnext<CR>
noremap <silent> <leader>pt :tabprev<CR>

" Shorcut for the scratch.vim scratch buffer
noremap <silent> <leader>sc :Scratch<CR>

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
"}}}

" INSERT MODE KEY MAPPINGS"{{{
" 
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
inoremap <C-E> <Tab>

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
"}}}

" VISUAL MODE KEY MAPPINGS"{{{
"
vnoremap <c-j> 5gj
vnoremap <c-k> 5gk
vnoremap <c-u> :s/\<\(\w\)\(\w*\)\>/\u\1\L\2/g<cr>:noh<cr>
"}}}

" COMMAND MODE KEY MAPPINGS"{{{
" 
" Map :W to :w so vim stops complaining about W
command! W :w

" allow command line editing like emacs
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-N>      <Down>
cnoremap <C-P>      <Up>
cnoremap <ESC>b     <S-Left>
cnoremap <ESC>f     <S-Right>
set cedit=<C-F>
"}}}

if has("autocmd")"{{{

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " PHP syntax check on the current file
  autocmd FileType php noremap <C-L> :!/usr/bin/php -l %<CR>

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
endif " has("autocmd")"}}}

" DiffOrig command (PS - I want a better one)"{{{
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif"}}}
