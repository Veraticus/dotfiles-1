" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate Pathogen plugin
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" SETTINGS
"
filetype plugin indent on
set encoding=utf-8
set smarttab
set softtabstop=2
set shiftwidth=2
set expandtab
set tabstop=4
set ignorecase
set smartcase
set nowrap
set textwidth=0
set autoindent
set linebreak
set number
set cursorline
set grepformat=%f:%l:%m
set listchars=tab:>#,eol:$,trail:.
set wildignore=*.swp,.git,.svn,*.log,*.gif,*.jpeg,*.jpg,*.png,*.pdf

set hidden                      " Be more liberal about hidden buffers
set backspace=indent,eol,start  " backspace over everything
set numberwidth=5               " Sets the gutter width for line numbers
set nobackup                    " do not keep a backup file, use an SCM instead
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set incsearch                   " do incremental searching
set hlsearch                    " Highlight all search matches
set lazyredraw                  " Don't update the display while executing macros
set ch=2                        " Make command line two lines high
set laststatus=2                " Always show the status line
set showcmd                     " Show the current command in the lower right corner
set showmode                    " Show the current mode
set completeopt=longest,menuone " Omnicompletion customizations
set complete-=i                 " Disable the use of included files in default autocompletion
set timeoutlen=250              " Short map keys timeout keeps the ui feeling snappy
set tags=./TAGS,TAGS            " Use Emacs tagfile naming convention
compiler ruby                   " Enable compiler support for ruby

set statusline=
set statusline+=[%n]\ %<                        " Buffer number
set statusline+=%.99f\                          " File path
set statusline+=%(%{fugitive#statusline()}\ i%) " Git branch if any
set statusline+=%w%m%r                          " Flags: window type, is modified, read-only
set statusline+=%y                              " File type
set statusline+=%=                              " Right align everything past here
set statusline+=%-16(\ %l,%c\|%{col('$')-1}\ %) " show line number, cols, total cols
set statusline+=%P                              " Percentage through file

" PLUGIN SETTINGS
"
" Hide the following file name patterns from the builtin browser
let g:netrw_list_hide = '.*\.swp$,\.DS_Store$'
let g:snips_author = "Andrew Le" " Set snipmate author

" Command-T Plugin and File Navigation
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>f :CommandTFlush<cr>
nmap <leader>g :CommandT<cr>
nmap <leader>gb :CommandTBuffer<cr>
nmap <leader>gf :CommandT %%<cr>
nmap <leader>gp :CommandT public<cr>
nmap <leader>gm :CommandT app/models<cr>
nmap <leader>gc :CommandT app/controllers<cr>
nmap <leader>gv :CommandT app/views<cr>
let g:CommandTMaxHeight = 15

" Fast alternate file switching
nnoremap <leader><leader> <C-^>

" SuperTab
let g:SuperTabCrMapping = 1
let g:SuperTabMidWordCompletion = 0
let g:SuperTabMappingTabLiteral = '<s-tab>'

" Compilers for MakeGreen
autocmd BufNewFile,BufRead *_spec.rb compiler rspec
autocmd BufNewFile,BufRead *_test.rb compiler rubyunit
map <silent> <leader>makegreen :call MakeGreen()<cr>

" File types
autocmd BufNewFile,BufRead *.master,*.aspx,*.ascx :set ft=html
autocmd BufNewFile,BufRead *.ru :set ft=ruby
autocmd BufNewFile,BufRead Vagrantfile :set ft=ruby
autocmd BufNewFile,BufRead *.pjs :set ft=processing
autocmd BufNewFile,BufRead *.radius :set ft=html
autocmd BufNewFile,BufRead *.cron :set ft=crontab
autocmd BufNewFile,BufRead *.json :set ft=javascript
autocmd FileType php noremap <C-L> :!/usr/bin/php -l %<CR>

" GUI/TERMINAL ENVIRONMENT SETTINGS
syntax on
set background=dark
colorscheme ale_solarized_dark

if has("gui_running")
  set guioptions=egmrt
  set guifont=Inconsolata:h14
else
  set t_Co=256
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" NORMAL MODE KEY MAPPINGS
"
" Move up and down over screen lines instead of file lines
nnoremap j gj
nnoremap k gk

" C-J and C-K move over lines a bit faster
nnoremap <c-j> 5gj
nnoremap <c-k> 5gk

" Edit the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>/ :noh<CR>

" Easy buffer navigation (next buffer and previous buffer)
noremap <silent> <leader>n :bn<CR>
noremap <silent> <leader>p :bp<CR>
noremap <silent> <leader>nt :tabnext<CR>
noremap <silent> <leader>pt :tabprev<CR>

" Shorcut for the scratch.vim scratch buffer
noremap <silent> <leader>sc :Scratch<CR>

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! SwapArguments()
  :normal viwy
  :execute "normal df\<space>"
  :execute "normal eli,\<space>"
  :stopinsert
  :normal ph2xb
endfunction
nnoremap <leader>rs :call SwapArguments()<cr>

" INSERT MODE KEY MAPPINGS
"
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" VISUAL MODE KEY MAPPINGS
"
vnoremap <c-j> 5gj
vnoremap <c-k> 5gk

" COMMAND MODE KEY MAPPINGS
"
" Map :W to :w so vim stops complaining about W
command! W :w

" allow command line editing like emacs
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-N>      <Down>
cnoremap <C-P>      <Up>
cnoremap <ESC>b     <S-Left>
cnoremap <ESC>f     <S-Right>
set cedit=<C-F>

function! GoToLastEditedLine()
  if line("'\"") > 1 && line("'\"") <= line("$") |
    exec "normal! g`\"" |
  endif
endfunction

augroup vimrcEx
  au!

  autocmd FileType text setlocal textwidth=78
  autocmd BufReadPost * call GoToLastEditedLine()
  autocmd BufReadPost COMMIT_EDITMSG exec "normal! gg"
augroup END

" DiffOrig command (PS - I want a better one)
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif
