" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate Pathogen plugin
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" SETTINGS
"
filetype plugin indent on
set encoding=utf-8
set smarttab
set softtabstop=2
set shiftwidth=2
set expandtab
set tabstop=4
set ignorecase
set smartcase
set nowrap
set textwidth=0
set autoindent
set linebreak
set number
set cursorline
set grepformat=%f:%l:%m
set grepprg=ack\ -A\ 0\ -B\ 0\ --nocolour\ --nogroup\ --column
set listchars=tab:▶\ ,eol:¬
set wildignore=*.swp,.git,.svn,*.log,*.gif,*.jpeg,*.jpg,*.png,*.pdf

set hidden                      " Be more liberal about hidden buffers
set backspace=indent,eol,start  " backspace over everything
set numberwidth=5               " Sets the gutter width for line numbers
set nobackup                    " do not keep a backup file, use an SCM instead
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set incsearch                   " do incremental searching
set hlsearch                    " Highlight all search matches
set lazyredraw                  " Don't update the display while executing macros
set ch=2                        " Make command line two lines high
set laststatus=2                " Always show the status line
set showcmd                     " Show the current command in the lower right corner
set showmode                    " Show the current mode
set completeopt=longest,menuone " Omnicompletion customizations
set complete-=i                 " Disable the use of included files in default autocompletion
set timeoutlen=250              " Short map keys timeout keeps the ui feeling snappy
set tags=./TAGS,TAGS            " Use Emacs tagfile naming convention

" Keep more context when scrolling off the end of a buffer
set scrolloff=3

" Store temporary files in a central spo
set directory=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp

set statusline=
set statusline+=[%n]\ %<                        " Buffer number
set statusline+=%.99f\                          " File path
set statusline+=%w%m%r                          " Flags: window type, is modified, read-only
set statusline+=%y                              " File type
set statusline+=%=                              " Right align everything past here
set statusline+=%-16(\ %l,%c\|%{col('$')-1}\ %) " show line number, cols, total cols
set statusline+=%P                              " Percentage through file

" PLUGIN SETTINGS
"
" Hide the following file name patterns from the builtin browser
let g:netrw_list_hide = '.*\.swp$,\.DS_Store$'
let g:snips_author = "Andrew Le" " Set snipmate author

" Command-T Plugin and File Navigation
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>f :CommandTFlush<cr>
nmap <leader>g :CommandT<cr>
nmap <leader>gb :CommandTBuffer<cr>
nmap <leader>gf :CommandT %%<cr>
nmap <leader>gp :CommandT public<cr>
nmap <leader>gm :CommandT app/models<cr>
nmap <leader>gc :CommandT app/controllers<cr>
nmap <leader>gv :CommandT app/views<cr>
let g:CommandTMaxHeight = 15

" Fast alternate file switching
nnoremap <leader><leader> <C-^>

" SuperTab
let g:SuperTabCrMapping = 1
let g:SuperTabMidWordCompletion = 0
let g:SuperTabMappingTabLiteral = '<s-tab>'

" File types
autocmd BufReadPost * call GoToLastEditedLine()
autocmd BufNewFile,BufRead *.master,*.aspx,*.ascx :set ft=html
autocmd BufNewFile,BufRead *.ru :set ft=ruby
autocmd BufNewFile,BufRead Vagrantfile :set ft=ruby
autocmd BufNewFile,BufRead *.pjs :set ft=processing
autocmd BufNewFile,BufRead *.radius :set ft=html
autocmd BufNewFile,BufRead *.cron :set ft=crontab
autocmd BufNewFile,BufRead *.json :set ft=javascript
autocmd BufReadPost COMMIT_EDITMSG exec "normal! gg"
autocmd FileType text setlocal textwidth=78
autocmd FileType netrw setlocal nolist

" GUI/TERMINAL ENVIRONMENT SETTINGS
syntax on
set background=dark
set t_Co=256
colorscheme ale_solarized_dark
call togglebg#map("<F5>")

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" NORMAL MODE KEY MAPPINGS
"
" Move up and down over screen lines instead of file lines
nnoremap j gj
nnoremap k gk
nnoremap <c-j> 5gj
nnoremap <c-k> 5gk
nnoremap <leader>w <c-w>vzz<c-w>l

" Edit the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>/ :noh<CR>

" Tell me what file I'm looking at
map <leader>q :file<cr>

" Quicker tab navigation
noremap <leader>; :tabnext<CR>
noremap <leader>, :tabprev<CR>

" Easy quickfix list navigation
noremap <F8> :call ToggleList('Quickfix List', 'c')<cr>
noremap <F9> :cnext<cr>
noremap <F7> :cprev<cr>
noremap <S-F7> :cfirst<cr>
noremap <S-F9> :clast<cr>

function! GetBufferList()
  redir =>buflist
  silent! ls
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

" Shorcut for the scratch.vim scratch buffer
noremap <silent> <leader>sc :Scratch<CR>

command! KillWhitespace :%s/\s\+$//g
command! Splat :set paste|:normal "*p|:set nopaste<cr>

" INSERT MODE KEY MAPPINGS
"
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" VISUAL MODE KEY MAPPINGS
"
vnoremap <c-j> 5gj
vnoremap <c-k> 5gk

" COMMAND MODE KEY MAPPINGS
"
" Map :W to :w so vim stops complaining about W
command! W :w

" allow command line editing like emacs
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-N>      <Down>
cnoremap <C-P>      <Up>
cnoremap <ESC>b     <S-Left>
cnoremap <ESC>f     <S-Right>
set cedit=<C-F>

function! GoToLastEditedLine()
  if line("'\"") > 1 && line("'\"") <= line("$") |
    exec "normal! g`\"" |
  endif
endfunction

